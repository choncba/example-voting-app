/*
LFS261
Jenkisnsfile del ejemplo de una app java Instavote
https://github.com/choncba/example-voting-app
*/
pipeline {
    // agent{
    //     docker {
    //         image "maven:3.6.1-jdk-8-alpine"
    //         args '-v $HOME/.m2:/root/.m2'   // Para que no descargue de internet la imagen cada vez que la usemos
    //     }
    // }
    // *** Como agrego el stage docker-package, ya que ahora quiero que el proceso de compilacion lo realice en un contenedor, 
    // y se cree aparte otro contenedor para correr la app, necesito definir el agente por cada stage individualmente, 
    // por eso comento lo anterior y agrego el agente en cada stage
    agent none 

    stages {                                    // Defino las etapas
        stage('build') {
            agent{
                docker {
                    image "maven:3.6.1-jdk-8-alpine"
                    args '-v $HOME/.m2:/root/.m2'   // Para que no descargue de internet la imagen cada vez que la usemos
                }
            }
            when{                               // Ejecuto en cualquier branch, pero
                changeset '**/worker/**'        // Solo se ejecuta si hago cambios en la carpeta worker
            }
            steps {                             // primera etapa, compilar
                echo 'Compiling worker file'
                dir('worker'){                  // Cambio al directorio worker
                    sh 'mvn compile'            // Comando compilar de maven desde SH
                }
            }
        }
        
        stage('test') {                         // Segunda etapa, test
            agent{
                docker {
                    image "maven:3.6.1-jdk-8-alpine"
                    args '-v $HOME/.m2:/root/.m2'   // Para que no descargue de internet la imagen cada vez que la usemos
                }
            }
            when{
                changeset '**/worker/**'        // Solo se ejecuta si hago cambios en la carpeta worker
            }
            steps {
                echo 'Running Unit Tests on Worker App'
                dir('worker'){
                    sh 'mvn clean test '
                }
            }
        }
        
        stage('package') {                      // tercera etapa, package, genera los archivos .jar
            agent{
                docker {
                    image "maven:3.6.1-jdk-8-alpine"
                    args '-v $HOME/.m2:/root/.m2'   // Para que no descargue de internet la imagen cada vez que la usemos
                }
            }
            when{
                // branch 'master'                 // Esto evita que se genere el package si no se trata del branch master,
                //                                 // si es otro, es solo para pruebas
                changeset '**/worker/**'        // Solo se ejecuta si hago cambios en la carpeta worker
            }
            steps {
                echo 'Packaging Worker App'
                dir('worker'){
                    sh 'mvn package -DskipTests'
                    archiveArtifacts artifacts: '**/target/*.jar', fingerprint: true
                }
            }
        }

        // En este stage convierto el resultado en un nuevo contenedor listo para ser ejecutado
        // Y luego publicarlo en mi dockerhub. Utiliza el Dockerfile para la imagen
        stage('docker-package'){
            agent any // PORQUE QUIERO EJECUTAR DIRECTAMENTE ESTO EN EL HOST, NO dentro del contenedor que compila
            when{
                changeset '**/worker/**'        // Solo se ejecuta si hago cambios en la carpeta worker
                //branch 'master'                 // Solo se genera la imagen para el branch master
            }
            steps{
              echo 'Packaging worker app with docker'
              // Agrego un script dentro del pipeline 
              script{
                // Me logueo a dockerhub https://docs.docker.com/engine/reference/commandline/login/
                // dockerhublogin es el nombre de la credencial creada en Jenkins con mis datos de dockerhub
                // Desde el menu del item de Jenkins (Instavote) ir a credentials -> Folder -> Global Credentials y agrego la nueva credencial
                docker.withRegistry('https://index.docker.io/v1/', 'dockerhublogin') {
                    // hago el Build con el Dockerfile
                    def workerImage = docker.build("lrbono/worker:v${env.BUILD_ID}", "./worker")
                    workerImage.push()
                    // Publico en Dockerhub
                    workerImage.push("${env.BRANCH_NAME}")
                }
              }
            }
        }
    }
    
    post{                                       // Post implementaci√≥n
        always{                                 // Indica ejecuatar siempre
            echo 'Pipeline for Worker App is complete!'
        }
    }
}

